@page "/account/login"
@using JoshWebTemplate.Core.Models.Account
@using JoshWebTemplate.Core.Services.Account.Api
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.ComponentModel.DataAnnotations

@inject ProtectedSessionStorage ProtectedSessionStore
@inject IAccountApiService AccountApiService
@inject NavigationManager NavigationManager

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudTextField T="string" Required="true" RequiredError="Email is required!" @bind-Value="loginUserModel.Email" Label="Email" Variant="Variant.Outlined" Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />

    <MudTextField @bind-Value="loginUserModel.Password" Label="Password" InputType="InputType.Password" Variant="Variant.Outlined" />

    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="LoginAsync">Login</MudButton>
</MudForm>

<span>Don't have an account?</span>
<MudButton Variant="Variant.Filled" Color="Color.Info" Href="/account/register">Register here</MudButton>
<MudText>In our production app, we won't allow for Register & Login, the sys-admin teeam would use the company accounts to make web accounts.</MudText>

@code {
    bool success;
    string[] errors = { };
    MudForm form = default!;

    private LoginUserModel loginUserModel = new();

    private async Task LoginAsync()
    {
        var result = await AccountApiService.LoginAsync(loginUserModel);
        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo("/");
        }
    }
}