@using System.Security.Claims
@using MySmartShift.Providers.Auth

@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager

<MudAppBar>
    <MudText Typo="Typo.h5">MySmartShift</MudText>
    <MudSpacer />
    <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" Edge="Edge.End" />

    @if (user?.Identity?.IsAuthenticated == true)
    {
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Logout">Logout</MudButton>
    }
    else
    {
        <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="NavigateToLogin">Login</MudButton>
    }
</MudAppBar>

@code {
    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        AuthProvider.AuthenticationStateChanged += OnAuthStateChanged;

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        user = authState.User;
        StateHasChanged();
    }

    private async Task Logout()
    {
        if (AuthProvider is SupabaseAuthStateProvider supabaseAuth)
        {
            await supabaseAuth.Auth_OnAuthStateChanged(null);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/account/login");
    }

    public void Dispose()
    {
        AuthProvider.AuthenticationStateChanged -= OnAuthStateChanged;
    }
}
