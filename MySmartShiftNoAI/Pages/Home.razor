@page "/"
@using MySmartShiftNoAI.Models
@using MySmartShiftNoAI.Services
@using MySmartShiftNoAI.Services.Interfaces
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IUserService UserService

<PageTitle>Home</PageTitle>

<h1>Welcome to MySmartShift</h1>

<AuthorizeView>
    <Authorized>
        <div>
            <h2>Database User:</h2>
            <p>
                @if (DatabaseUser != null)
                {
                    <strong>Role:</strong> @DatabaseUser.Role <br />
                }
                else
                {
                    <span>Loading database user...</span>
                }
            </p>
        </div>
        @if (_user != null)
        {
            <div>
                <h2>Logged in as:</h2>
                <p>
                    <strong>Name:</strong> @_user.FirstName @_user.LastName<br />
                    <strong>Email:</strong> @_user.Email<br />
                    <strong>Role:</strong> @_user.Role
                </p>
                <button @onclick="LogoutAsync">Logout</button>
            </div>
        }
        else
        {
            <div>
                <div>Loading user information...</div>
            </div>
        }
    </Authorized>
    <NotAuthorized Context="authContext">
        <div>
            <h2>Not Logged In</h2>
            <p>Please log in to access your account.</p>
            <button @onclick="NavigateToLogin">Login</button>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private ApplicationUser? _user;

    private DbUser? DatabaseUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            _user = await UserService.GetUser();

            DatabaseUser = await UserService.GetDbUser();
            StateHasChanged();
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/account/login");
    }

    private async Task LogoutAsync()
    {
        await AuthService.LogoutAsync();
        _user = null;
    }
}
